antes que naaaaadaaaaa
renombrar AccountRequest a AccountApplication


Requisitos
------------------------------------------------
tsc (si no lo tenés, npm install -g typescript)
node
cuenta en repl.it (recomendada)



0. Intro a TS - entornos de ejecución
------------------------------------------------
TS es un compiler (¿o transpiler?), el código que se ejecuta es JS.
Qué nos da:
- chequeos estáticos (descomentar la asignación a "hola" en cuentas.ts, idem nombre.jaja)
- intellisense en los editores (un aspecto al que cada vez se le da más importancia)
  poner "nombre." y esperar.  

Probemos con un ejemplito: tiposBasicos.ts.
- node tiposBasicos.ts 
  tira error en el : ... node no puede ejecutar .ts.
- tsc tiposBasicos.ts
  genera tiposBasicos.js, lo miramos.
- node tiposBasicos.js
  ahora sí
- node solito
  - const pepe = 4 
    OK
  - const pepe: number = 4 
    no lo entiende

Para ser más prolis, cambiamos la compilación a
  tsc -p .
esto compila todo lo que tengamos ... y usa tsconfig.json, que tiene las opciones de compilación
(son muchas, iremos viendo algunas)
De paso, vemos que deja los .js en otra carpeta entonces queda más ordenadito.

Las tareas de los proyectos inicializados para Nest o para React Native hacen la transpilación; 
levantan la app sobre el resultado de esa transpilación.

Hablar del tsconfig.json. Se puede agregar
        "noImplicitAny": true
y ver que no compila la definición de triple.

En la definición de triple, también se puede ver cómo VSCode infiere tipos de parámetros.
La inferencia del tipo de retorno la hace TS nomás, por eso no es necesario ponerla.

Para evitar el paso de traspilación, y tener un entorno ágil de prueba, podemos usar repl.it.
Tarda para arrancar, pero es un REPL con todas las de la ley.

Antes de pasar a otro tema ... definamos un String nombre2, y después agreguemos arriba
  export const basicTypesModule = null
¿por qué se puso en gris nombre2?
(si no ponés ni import ni export, toma como scope global)


(
  y nos movemos a repl.it por un ratito ...
  ... en rigor, editamos en VSCode para mostrar el intellisense, probamos en repl.it.
)



1. Un poquito de tipado
--------------------------------
(abrimos tipos basicos)
Lo que ya vimos: al definir un identificador se le puede, o no, poner un tipo.
A partir del tipo, el intellisense entiende qué operaciones se pueden hacer sobre un objeto.

Le quiero asignar un String a la variable a ... no anda.
¿Qué pasa con b?
    => Moraleja: **inferencia de tipo**.

Hablar de inferencia de TS y del editor (parámetro de triple)

¿Y si le quiero asignar un String a b2?
    - ¿Un String o cualquier cosa? Diferencia entre any y (number | string)
    => Moraleja: complejidad del sistema de tipos.

Mostrar casos en los que el TS me traba de más: si el ident es any, por más que el valor sea un número, no lo voy a poder pasar por la función.

Hablar del tipo de las funciones.


2. Literal de objeto.
--------------------------------
Nos basamos en object literals ... pero lo vamos armando.
Repaso
- acá es donde el intellisense se pone más pulenta

¿Y cuál es el tipo de un object literal?

Ya que estamos: por más que sea const, los componentes los puedo cambiar.

interface: especificación de tipo (agregamos AccountRequest y tipamos firstRequest y otherRequest)

(repaso de referencias con copiedRequest - efecto raro con anyRequest ... ¡puedo romper firstRequest!
 asimilarlo a una especie de casteo ... no exactamente un casteo, eso lo vemos después)



3. Interfaces
--------------------------------
Qué es una interface, repasamos a partir del ejemplo.

Duck typing.

Componentes opcionales.
- ¿cómo sé si el dato opcional viene o no? Recordando lo de truthy y falsy.
- ya que estamos, herencia de interfaces.
  - oh, con herencia explícita de interfaces sí acepta más campos ... hablar un poco 
    de las limitaciones y misterios del type system TS. 
    Lo queremos como es, confiamos en que es mejor que nada.
    (mi opinión: garpa sobre todo por el intellisense)

Componentes abiertos.
- qué estamos usando: propiedad indexada, sólo vale indexar con string o con number.
- para qué sirve: para parámetro de función.

Mostrar la opción del seteo de compilador
  // esto probarlo agregando "suppressExcessPropertyErrors": true en el tsconfig.json
  // console.log(isLongAddress2({ street: "Luque", streetNumber: 3434, city: "Reconquista" }))
Hablar un poquito sobre seteos de compilador, TS es mínimamente maleable.
Obvio que en BDSol conviene manejarlos en forma unificada, para que no sea un bardo saltar de un microservicio a otro.



4. Generics
--------------------------------
Ver ejemplos con arrays, entenderlos.

Ver ejemplo con array de objetos, no sólo sirve para chequeo de lo que meto, sino (y para mí, al menos igual de importante) para intellisense sobre los elementos del array.
Igual probemos el push.
Creo que es interesante mirar el filter, el intellisense dentro de la función, y después sobre el resultado.

Esta capacidad de tener una estructura relacionada con un tipo "abierto", que se define recién en la creación, no es sólo para arrays.

Veamos otro tipo que viene con JS/TS: map.
Meter el concepto de definición genérica. Map es un tipo genérico.

--------------------------------------------------
Un pequeño aside: 
¿qué pasa si pongo createNewRequest(4)? Pensemos en el tipo del customer.
Auchhhhh se rompe, otra vez la manquea TS, podría darse cuenta que sólo pueden ir argumentos String ahí.

Peeero (nos paramos) el tipo del parámetro es any. Pero ... con un aviso.
Ahhhh, está claro, es any pero podría ser algo más copado. Tengo a mano el fix y todo. ¡Sa-láaaaaan!
Agregar esta opción de compilación
    "noImplicitAny": true
... esa ... ahora me marca el any como error. El fix sigue estando.
--------------------------------------------------

Yyyyy atenti que ... ¡¡podemos crear nuestras propias definiciones genéricas!!

Arrancamos con Pair.

OK, pero esto es super fumado. ¿Hay algo más terrenal?

--------------------------------------------------
Aside: ver esto
function triple(n: number) { return n * 3 }

let myFn = triple

let selfCompose = function(fn: (arg0: any) => any) { return function (n: any) { return fn(fn(n)) } }

let selfCompose2 = function<T> (fn: (arg0: T) => T) { return function (n: T) { return fn(fn(n)) } }

let composeTriple = selfCompose(triple)

let compose2Triple = selfCompose2(triple)

Comparar el tipo inferido de composeTriple y compose2Triple
--------------------------------------------------



5. Mis propios Generics
--------------------------------
Vemos dos ejemplos.

Vamos a requests genéricos, pedidos de cualquier cosa.
- de paso vemos enum
- vemos type, defino una "abreviatura" para un tipo que me viene cómoda para las especificaciones.
- vemos el intellisense en cada paso de la definición de isLocal.
- funciones que funcionan para cualquier request: makeMoreStrict. Acá de paso validamos la existencia de un atributo opcional.

Ahora distintas cosas que pueden llevar precio. Este se parece más a herencia de clases ... pero sin clases.
Definimos distintas cosas con precio.
Definimos las funciones raisePrice y doubledPrice.
Andan con todo ... excepto con literales.
Teníamos la opción de definir un "ExtendedPrice" ... veamos una alternativa con generics.

Ahora una más interesante: moreExpensive.
- miren el intellisense, sobre el 2do parámetro cuando establezco el 1ro, y (muy importante) sobre el resultado.
- ¿qué pasa si quiero comparar dos cosas distintas?
  ... puedo, pero lo único que puedo decir del resultado es que es priced.
  También lo puedo definir como T | U, si eso sirve para algo.


--------------------------------

Cierre: esto es una partecita así de chiquita del sistema de tipos de Typescript, y de los seteos de compilación.

Las intenciones fueron
- entender mejor algunas anotaciones que vemos en el código
- darles una base que les haga más fácil buscar más info y procesarla.



6. Decorators
--------------------------------
En TS podemos definir clases, como en JS, obviamente agregando todo el tipado.
Miremos un controller Nest, que es una clas. Además del tipado, ¿qué vemos que no poníamos en una clase JS?
Exacto, las arrobas esas. Esos son los decorators.
Para los que vienen de Java, tienen una sintaxis similar (si no igual) y el mismo propósito que las annotation de Java.
Piensen p.ej. en Spring, SpringBoot, Hibernate.

Los decorators son usados por librerías y frameworks para agregar configuraciones a medida que se van procesando las definiciones que forman parte de un conjunto de archivos TS.
P.ej. ¿qué hace Nest cuando se encuentra con las anotaciones de un controller? Imaginemos
- @Controller: crea una instancia y la deja en algún registry donde la tenga a mano. Una instancia o un pool, lo que le venga más cómodo.
  También, le asocia el string que va como parámetro, para armar las URL de los endpoint.
- @Get / @Post: agrega dos endpoints en el express subyacente. La URL la arma componiendo el string que tomó del @Controller con el que se pone en @Get o @Post. En cada endpoint, llama al método correspondiente en la instancia que se guardó en el registry.
- @Body: en la configuración del post, agarra el body y lo pasa como parámetro cuando llama al método de la instancia del controller.

No sé cómo hace Java para procesar las annotations, no es difícil pero nunca lo miré.
En TS, vi un poquito así para contarles.
En principio es muy sencillo: se define una función para cada decorator, que recibe como parámetro el elemento que estás decorando.
Ahora entendemos qué son los import: son los de las clases que implementan cada decorator.
Entonces ¿puedo implementar mi propio decorator? ¡Pues claro!
Hacemos un par a título informativo.

1. Uno sin parámetros, que salude nomás.
2. Ahora le agregamos un parámetro para personalizar el saludo.
3. Ahora me acuerdo de algo, en este caso de la clase. También podríamos guardarnos una instancia, lo que dijimos de @Controller. O un mapa. A ver.

Listo, hasta acá me aprendí. Googleando se encuentran ejemplos.

Insisto, esto es sólo para tener una mínima idea de qué es cada cosa que estoy usando, sacarle un poco de la característica de magia negra. Con paciencia y sabiendo cómo leer y a quién preguntarle, todo pasa del lado de lo comprensible.



