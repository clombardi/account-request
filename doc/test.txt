------------------------------------------------------
(página "Test - empezamos")

Algo de intro 

Por qué testeamos

Habrán visto / leido / escuchado mucho sobre por qué testear.
Sin pretender dar una clase, sólo daré algunas razones que yo veo
(sólo se mencionó la última en el texto)

1. para estar tranquilo que no se nos colaron errores.
2. como una forma adicional de documentación.
3. a veces, para ayudarme a entender cómo conviene organizar un diseño,
   qué clases/funciones/objetos definir, y cómo engancharlos.
4. para que dé menos miedo el refactor.

Además, está el tema de la integración de test con CI (de este sí se habla un poco en el texto).

(lo del qué testear y herramientas lo dice en el texto)
Qué se testea: cualquier cosa
- desde lo más chiquito, una función.
- hasta un controller, esto es lo que se llama un test end-to-end o e2e de backend.

Vamos a ver test de distintos niveles.

En testeos de alto nivel va a ser relevante mockear cosas.

Hay muchas herramientas / librerías para test en el mundo JS / TS.

Vamos a basarnos en Jest, el factor decisivo es que tiene soporte directo de NestJS, pero además está bien y es muy popular.
NestJS sí tiene soporte para testing, ver https://docs.nestjs.com/fundamentals/testing
(en esto no parece haber cambios de la versión 6 a la 7)
(en general son bastante parecidas, hay cambio de versión porque se rompe la compatibilidad, pero no hay grandes cambios,
 lo principal parece ser un soporte mejorado de GraphQL que no sé qué es. Sí le pusieron más cariño a los pipes. 
 Ver en https://trilon.io/blog/announcing-nestjs-7-whats-new)


(lo que sigue no está en el texto)
Con test como con tantas otras cosas: tanto o más importante que aprenderse los trucos y posibilidades de una herramienta, es entender qué queremos testear. Testear demasiado toma muchísimo tiempo, testear poco va contra los objetivos, hay una cuestión de jedi de encontrar los conjuntos de testeos correctos.

Asociado a esto una cuestión que personalmente creo importante: armar buenos escenarios de test. Esta actividad, en sí misma, nos puede ayudar a entender dominios complejos, lo que decíamos entre las razones de por qué testear.

Por eso va a aparecer en el material, la pregunta de "qué casos testear".



------------------------------------------------------
(página "Un test chiquito")

Para nivelar (porque no sé qué/cuánto sabe cada une), hagamos una función bien chiquita y algunos tests.

Para romper el hielo: díganme ustedes qué es un test, en qué consiste, qué se testea en un test.
Lleguemos a que lo que se testea en un test, es que en una determinada situación, un componente se comporta como decimos que se debe comportar.
Por lo tanto en un test se debe incluir
- la descripción de la situación, a esto lo relacionamos con lo que llamamos "escenario".
- la invocación al componente que queremos testear.
- una indicación del resultado que esperamos, que puede ser: la respuesta, un efecto, un error.

Función familySize, la presentamos. 
Mostrar que ya el tipado nos ayuda, no podemos poner
    return family.children + family.nephewsNieces + family.cousins


¿Que sería probarla? crear una familia y decir "si evalúo la función sobre esta familia, tiene que dar tanto".

P.ej. para esta familia
    const completeFamily: FamilyMembers = {
        children: 8,
        nephewsNieces: 4
    }
¿cuánto debería dar?

Armamos el test, probamos, oh da verde.

Marcamos la anatomía del test (esto está bien explicado en el texto).
En particular
- tres cosas: escenario, ejecución, verificación
- por qué son funciones

Después, contar el expect (esto tb está en el texto).

Finalmente, qué es eso del describe - test suite (esto tb está en el texto).



------------------------------------------------------
(página "Más sobre el testeo de una función sencilla")
Podemos ir por el discurso de la página.

OK, tenemos un test verde ¿seguro que está bien la función?

Contar que (esto va por afuera del texto)
- el test nunca va a dar garantía, que lo único que dice que da garantía es la verificación formal ... para lo que tenés que formalizar los requerimientos.
Sirve para control de centrales nucleares.
- pero hay una distancia grande entre "listo, hice un test" y "le di con todo, me extrañaría que fallara".

(y volvemos al texto)
una idea que me sirve para armar casos de tests es la de caso límite, alguno/s de esos tiene/n que estar.

(volvemos a salir del texto)
Después, si hago distintos tests, que los resultados sean distintos. Si todos los tests que hago el resultado es (ponele) 12, entonces esta implementación
function loQueQuieroProbar(params) {
    return 12;
}
va a pasar los tests.

(y volvemos al texto)
vemos el error, corregimos, somos felices.

(seguimos sobre el texto)
Armar el test sobre objetos, contar un toque lo de igualdad e identidad.
Puede servir una sesión sobre repl.it.


------------------------------------------------------
(página "Testear una aplicación Nest")
OK, repasamos lo básico (con las disculpas del caso si eran cosas archi-sabidas).

Vamos rápidamente, que el tiempo es tirano, a ver cómo testear un microservicio Node.

OK, hay herramientas que hay que aprenderse. Pero *antes*, pensemos un toque en *qué* puede tener sentido testear.

De ahí, al discurso del texto: controller / provider / middleware / e2e.
Tratar de hacerlo participativo respecto de pensar la estrategia para probar cada componente: qué mockear, y a qué invocar.

Otra vez al texto, al final: arrancamos por providers porque me parece que el camino queda más tranca. Vamos.



------------------------------------------------------
(página "Un test de controller NestJS")
Se puede empezar pidiendo que hagan la implementación, pegándole al servicio de REST Countries que usamos antes.
Para el continentCode usen una tabla fija en el provider, se les puede pasar la que armé yo.
Arranquen con las dos interfaces y el código del controller, eso está fijo. Lo que tienen que hacer es
- implementar el provider
- armar el módulo, tal vez en una app aparte.

Ténganlo andando en el Postman, después seguimos.

Atenti, que el provider tire las excepciones que dice en el texto.

Después, vamos al texto. Hay que contar el armado del TestingModule, y el cambiazo del provider por el fake.
Quedarnos un toque en por qué no se puede configurar directamente el módulo con el fake provider.
Dejarles un rato para que armen el test y lo prueben.

(seguimos con el texto)
Qué pasa si el controller sale por excepción. OJO que es asincrónico, en el caso del reject hay que ser explícito.
Recordar que una promesa puede ser resolve o reject.
Escribir el "código largo" de la verificación por resolve.

Si da, pararnos en un caso sincrónico, y contar por qué tiene que ser una función lo que se le pasa al expect en este caso.
Por qué en el caso asincrónico no hay que hacer este truco: porque se encarga el `await`, si se genera una excepción, devuelve una Promesa de rejection con la excepción como valor asociado. O sea
    try {
        return Promise.resolve(codigo)
    } catch (e) {
        return Promise.reject(e)
    }



------------------------------------------------------
(página "Agrupando acciones comunes")
ir con el texto, no más que eso



------------------------------------------------------
(página "Un test sobre listas")
Vamos con el texto. Primero presentamos y mostramos andando el endpoint, después que lo implementen.

Tal vez después de la implementación, debatir algunas decisiones polémicas en el diseño del endpoint; ver https://clombardi.github.io/bdsol-capacitacion-desarrollo/nestjs-basics/distintas-fuentes.html.
(la lista no está en el texto)
- hacer un endpoint aparte en vez de una opción que agregue la info de vecinos, en alguno de los formatos discutidos en https://clombardi.github.io/bdsol-capacitacion-desarrollo/api-rest/api-rest-varios.html.
- no incluir info del país.
- integrar en el controller.
- que si hay un vecino sin datos no explote ni avise.

Después de que esté la implementación, si da, volver sobre esta firma.
    async getCountryDataOrNull(countryCode: string): Promise<CountryData> {
        return this.countryDataService.getCountryData(countryCode).catch(() => undefined);
    }
Recordar (ya lo vimos en https://clombardi.github.io/bdsol-capacitacion-desarrollo/nestjs-basics/distintas-fuentes.html) que si habilitamos el `strict` en las opciones de compilador, esto no funciona; hay que poner
    Promise<CountryData | undefined>
probar si en lugar de undefined de pone "hola", ven que ahí no va a pasar.
Esto está contado en https://clombardi.github.io/bdsol-capacitacion-desarrollo/nestjs-basics/distintas-fuentes.html

Después implementar, primero fake provider, después test. 

En el fake provider, para meter JSON, hay que prender 
    "resolveJsonModule": true
en el tsconfig. Ver https://mariusschulz.com/blog/importing-json-modules-in-typescript.
(acá abajo, un par de cosas que no están en el texto)
Tal vez tengan que cerrar el VSCode y volverlo a abrir, aunque eso debería ya estar superado, cfr. https://github.com/microsoft/TypeScript/issues/25400.
Mostrar qué lindo que tipa. (esto está, pero es lindo mostrarlo "en vivo")
Incluso, al tipar la función, les va a saltar si falta algo en el archivo.

En el test, mostrar los matchers sobre listas. Se pueden hacer ejemplos con listas fijas.


------------------------------------------------------
(página "Test de middleware - end-to-end test")
Creo que el hilo del texto está bien.

1. por qué hay que ir a un e2e: hay que "despertar" a Nest para que active a los elementos de middleware.
2. idea de e2e test. Necesitamos dos cosas: una app-para-test de Nest, y una simulación de request.
3. claro que sí, el middleware que queremos testear.
4. app-para-test de Nest: fácil.
5. a qué controller le pegamos el middleware: a uno fake
6. la estructura de la suite hasta acá
7. simulación de request - SuperTest 

Un comentario final que no está en el texto.
Uno podría pensar "che, pero estoy probando con el seteo puesto directamente en el controller, ¿cómo hago para probar middleware seteado globalmente?".
A eso respondo: ¿qué estaríamos probando si variamos cómo se setea el middleware? 
Estaríamos probando Nest, eso que lo haga la gente de Nest.



------------------------------------------------------
(página "Test de provider - mockeamos Mongo")
El hilo del texto está OK.

0. contexto.
Destacar que no se está mockeando Mongoose.

1. el módulo.
Es igual, o casi, que el que definimos para practicar mongoose. Háganse una copia (o branch en el repo), ajusten a las interfaces definidas, y háganlo andar.

2. qué vamos a probar.
(esto no está en el texto)
Ver sobre el código qué es lo que se va a probar.

3. estrategia
acá me jugué con los gráficos. Terminado esto, podrían tener andando la estructura (que está transcripta en el texto)

4. un primer test
Esto es para que jueguen elles

5. datos iniciales
Puedo plantear "ok, ahora quiero probar con 10 documentos, hacer distintos filtros y ver qué da".
¿De dónde saco los 10 documentos? Sobre todo dado que estamos usando un mock de BD.
Hay que crearlos.
¿Y cómo hacer para crearlos? Ahi enganchar con las cuatro estrategias que se proponen, destacando las dos que vamos a trabajar.

6. conexión a mongo
la importancia del --save-dev, se supone que mongodb no debe estar (directamente) entre lo que se requiere para la app en producción.
... vieron qué fácil usar mongo, nos preguntaremos por qué mongoose ... yo también me lo pregunto.

7. necesidad de limpiar la base
¿se entiende, no?

8. provider de test
comentar que yo dejé las funciones dentro de la suite, ahora llaman al provider. Como cada une quiera.






-------------------------------------------------------
A meter en algún lado

configuración de jest en package.json, al menos contar que existe y linkear con doc https://jestjs.io/docs/en/configuration.
Probé con testPathIgnorePatterns.

por otro lado, creo que voy a tener que mirar si el soporte de Nest para test se banca *mockear* middleware.

toHaveCalled (https://jestjs.io/docs/en/expect#tohavebeencalled)

toBeCloseTo (para aproximación)

toHaveProperty (para propiedades anidadas)

distintos tsconfig para código y para test, esto tengo que ver cómo se hace.

-------------------------------------------------------
A definir

Estrategia para mockear Mongoose. Tres opciones que encontré.

OJO que puse link a la 1 en test-intro.md, si se cambia la decisión, cambiar el link.


1. 
Mockingoose
https://www.npmjs.com/package/mockingoose
parece ser lo más cómodo, pero
- poco popular
- última versión de hace un año


2.
Mongo Memory Server
Ver estos dos artículos
https://dev.to/paulasantamaria/testing-node-js-mongoose-with-an-in-memory-database-32np

https://medium.com/javascript-in-plain-english/how-i-setup-unit-test-for-mongodb-using-jest-mongoose-103b772ee164

Pero atenti que hay que mockear el app module para cambiar la URL de Mongo, que la está manejando Nest.


3.
Sinon, encontré esta guía (un poco viejita)

https://codeutopia.net/blog/2016/06/10/mongoose-models-and-unit-tests-the-definitive-guide/


