(Página "Modelos de BD")
BD relacionales: PK / FK, JOIN, índice, integridad referencial.

Por qué se buscan alternativas (esto no está)
- se generan cientos de tablas por la imposibilidad de poner datos compuestos en una celda
- la lógica es de un repositorio de datos centralizado, difícil de distribuir
- chequeo de integridad referencial puede hacerse pesado
- en muchos contextos, perder un poco de consistencia no es grave
- consultas típicas pueden involucrar muchas tablas y hacerse lentas. Solución: vistas materializadas, con la penalización sobre las actualizaciones.
- la flexibilidad de poder cruzar los datos en cualquier sentido no se usa en la operación diaria, para ese tipo de análisis se vuelcan los datos en otro tipo de herramientas.

BD de documentos: lo que dice. Diferencia más relevante: desnormalización.

(esto va oral nomás)
Qué se gana
- flexibilidad, agilidad en el desarrollo.
- más preparadas para distribución.
  - replica
  - shard

Qué se pierde
- no tienen integridad referencial, al menos en principio
- los datos internos quedan más "encerrados"

Convergencia (esto sí está)
Las BD concebidas desde un modelo, van adquiriendo las características favorables del otro.


Mongo (esto no está en el material)
- el motor corre una máquina virtual de JS
  acá podemos meternos a la CLI y hacer algunas operaciones, que se vea la sintaxis JS.
  P.ej. db.accountrequests.find()[0].status.toLowerCase()
- obviamente, todas las operaciones son asincrónicas.


------------------------------------------------------
(Página "Librerías")
Mongoose: librería que hace un poco más cómodo el manejo de Mongo dentro de un programa JS / TS
Mucho muy popular (ver hits en npm).

En el sitio verán el bleh de ORM y ODM, lo dejo como referencia.
En particular, se entiende por qué Mongoose es sólo para Mongo, mientras que TypeORM puede aplicarse a distintas BD relacionales (e incluso al mismo Mongo, aunque nunca lo usé).

(esto no está escrito)
Comentar que MongoJS ofrece una librería de bajo nivel para usar en JS, y supongo que en TS también (no la probé en TS).
Simplemente, usar Mongoose resulta más cómodo, y además es lo que hace BdS.


------------------------------------------------------
(Página "Arranquemos con Mongoose")
Cuatro conceptos
- conexión
- esquema
- modelo
- operaciones

Conexión: 
como cualquier DB, hay que pasarle un String de conexión, en la era moderna es una URL
Nos conectamos, nos desconectamos. Perfecto.

Esquema: 
especificación de una colección.
Para cada atributo se pueden especificar validaciones, algunas vienen, también (por lo que dice la doc) se pueden especificar como una función JS.
Tiene tipos básicos.
Se le pueden agregar chiches varios (veremos alguno)

Modelo: 
se crea (específicamente, se compila) a partir de un esquema, es al modelo al que se le piden las operaciones.

Operaciones
Todas las operaciones 
- son asincrónicas, vamos con el async/await a full.
- involucran documentos de Mongoose.

Operaciones - save
Acá se ven las validaciones - ver addFaultyApplication (esto que lo prueben).
Si en el registro van datos de más, no salta error, pero mongoose trunca (esto se los puse para probar).

Operaciones - find
Find sin condición: trae todos.
Acá ver qué te trae: objetos Document. Le puedo pedir el valor de un atributo, se muestra bien, pero también tiene otras cosas.
(eso lo usé para mostrar modificación)
Tengo toObject().

(hasta acá es la página de "cuatro conceptos", que cierra con algunas pruebas para que hagan)


------------------------------------------------------
(Página "Búsqueda de documentos")
Puedo pedir algunos: find con parámetro. 

La lógica de búsqueda es la de mongo, o sea, pasamos al manual de mongo - https://docs.mongodb.com/manual/reference/operator/query/.
(esto no dice)
si da, se puede mencionar que para búsquedas y operaciones más complejas están los aggregation, https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/ y https://docs.mongodb.com/manual/reference/operator/aggregation/.

Ejemplos
- los de un status.
- el de un customer: si sé que viene uno, o me sirve uno cualquiera, puedo usar findOne.
- condición numérica - más de dos aprobaciones.
- los que no estén aprobados: $not.
- los de las hermanas Bolena: regex - https://devopedia.org/images/article/173/6028.1557317770.jpg.



------------------------------------------------------
(Página "Algo más sobre esquemas")
Chiches
Decíamos que al esquema le podemos poner chiches varios, y que el modelo funciona como una clase.
Veamos dos de estos chiches


- virtuals - atributos calculados
Ver https://mongoosejs.com/docs/guide.html#virtuals
isDecided
Primero lo pedimos.
Acá vemos lo que nos devuelve el find, que es una lista de documentos, que son las instancias del modelo, por lo tanto tienen los atributos agregados.
Después, toObject({virtuals: true})



- methods - para agregar funcionalidad
También podemos agregar métodos que van a tener las instancias del modelo.
Cfr. https://mongoosejs.com/docs/guide.html#methods.
Lo vamos a usar para manejar la fecha.

Manejo de fechas (esto no está en el texto)
Un toque de fechas en Java / JavaScript.
En JS / TS tenemos moment, que es muy popular, y nos da varias operaciones: comparar, sumar, obtener atributos.
(podemos probar con un repl.it - buscar el repl "utc con moment").
- obtener un dato: día / mes / año / día de la semana
- clonar para ...
- ... sumar / restar días / semanas / meses a una fecha
- diferencia entre dos fechas ... ok me da un número ...
- ... que se puede interpretar como duration, y ahí le saco la data

OK ¿y cómo manejamos la fecha?
Decido guardarla como número, y exponerla como String / moment.
Agregamos los setters y getters.
- usamos el setDateFromString al grabar
- usamos dateAsMoment para obtenerla. Acá vemos lo que nos devuelve el find, que es una lista de documentos,
  que son las instancias del modelo, por lo tanto tienen los métodos agregados.

Lo que viene - cómo usamos Mongoose dentro de un proyecto NestJS
(va en script aparte)



(para la etapa 1)
toJSON(), diferencias con toObject()




