Qué hacer (un poco de meta-script)
- terminar el texto de intro
--------------------------------------
- armar la app de ejemplo, ir anotando títulos de las páginas
- armar páginas
- armar script



(de acá para abajo, el script)
Speech inicial, está en el texto. 

Primero: rol de NestJS.
La pregunta de para qué sirve Nest si ya tengo Express en particular me la hice yo, con Express alcanza para levantar un servidor HTTP sobre Node. Entonces, hay algo que no es simplemente tener-un-servidor-andando que nos aporta Nest, vayamos entendiendo qué es.

Y ahí salen las ideas de
- organización (para justificar los módulos)
- simplificación (en la mayor parte del código, uno se olvida de los objetos request y response; también simplificación p.ej. del manejo de errores)
- concepto más trabajado de middleware (en lugar de un tipo solo, distintas variantes)
- conectores que simplifican el uso p.ej. de Mongoose o TypeORM
- componentes que simplifican el testing

Van los disclaimers, al que se agrega que yo no soy nada parecido a un experto de NestJS.

(saltamos a conceptos iniciales)
Repasamos nociones de controller/provider/módulo
Podemos agarrar un repo BDS (pedir permiso para esto), yo estoy mirando people-hub que tiene varios módulos.
1. Controller - maneja rutas
   El persons.controller.ts tiene varios get.
2. Provider - provee
3. Module - organiza
   además de los imports/exports/controllers/providers, podría tener
   configuraciones (p.ej. de middleware) específicas para el módulo.

Receta - paso 1
Relación entre módulos: el SignUpRequestModule importa al PersonsModule.

Receta - paso 2
Ver en el app.module que están todos.

Receta - paso 3
Ver la inyección del servicio en PersonsController.

Bueno, ahora vamos a armar uno de cero.

(pasamos a "Empezamos a armar una app")
Para crear el proyecto y correrlo, eso lo saben mejor que yo (que todavía no me sé cómo hacer hot reload), y si no está en la doc.

Vamos con un endpoint. 
Pueden arrancar haciendo que devuelva algo fijo, para tener el circo armado.

Listo, ahora alcanza con acomodar algo del código que habíamos hecho en el ejercicio de async. Vamos con lo mínimo, una consulta sola.

Repasamos la necesidad de async/await, y los tipos.

Objetivo 1 entonces: un endpoint que busque info de RESTCountries.
En el servicio: que tome 
    export interface CountryInfo {
        countryCode: string,
        countryIso2Code: string,
        countryNames: { es: string, en: string },
        population: number,
        currency: {code: string, name: string, symbol: string},
        internetDomain: string
        neighborCountryCodes: string[],
    }
En el controller: que exponga
    export interface CountryInfoDTO {
        code: string,
        name: string,
        population: number,
        internetDomain: string
    }

Insistir mucho en que no pongan any en ningún lado, y que verifiquen que está chequeando, o sea, que si mandan datos de menos en el provider, o en lo que devuelve el controller, salte en el VSCode.

Ah, y usen lodash.pick con el tipado, es zarpado.

Entender la sintaxis (await axios.get(url)).data


Bien, lo tenemos andando. 


¿Qué pasa si hay un error? veamos
- axios me devuelve un error
- metemos una excepción a mano

¿Qué nos gustaría hacer? Claro, manejar el status code y el mensaje.
De repente p.ej. un 404 de un servicio al que llamo, en mi respuesta es un 500, o puede ser también un 404.
Y también hay errores de programa.

Ver qué hace. 

Observar que en principio no "tocamos" la response, el status code lo decide Nest. 
(se puede probar la posibilidad de cambiarlo, creo que está en la doc)

Nest maneja esto mediante excepciones. Tiramos una ImATeapotException, vemos qué pasa.

¿Cómo hacemos, dónde podemos intervenir? Tres lugares
- lanzar
- transformar
- manejar

Lo de lanzar es fácil y supongo que ya lo hicieron.

Contar lo de transformar, que en rigor no es de Nest, es del oficio.

Lo de manejar sí es particular de Nest, que define un componente llamado ExceptionFilter. Se implementa, y se le dice a Nest dónde se lo quiere aplicar, puede ser: en un endpoint, en un controller, en toda la app. No, para módulo no tiene.

Qué puedo hacer en un ExceptionFilter
- acciones adicionales, típicamente loguear
- armar la response. Acá sí armamos la response como si estuviéramos en Express.

Ver el que se usa en los proyectos BdS.

A partir de acá, mostraría los ejemplos en el orden en que están en la página

(esto quedó para probar)
Probar si un ExceptionFilter puede no tocar el response, p.ej. sólo loguear, y que le lleguen request y response igualitos al siguiente ExceptionFilter. 




Ahora agreguemos los datos de COVID.
(vamos a "Combinar datos de distintas fuentes")
... la info está en la página, tal vez convenga contarla en un orden distinto.

Tenemos dos tareas nuevas: resolver la consulta de datos COVID, y juntar todo en la respuesta del controller.

Antes que nada, creo que conviene aclarar lo de los códigos. 
Primero, que se entienda el problema, y que es algo que puede pasar cuando se interactúa con otros sistemas.
Aunque suene duro, les pido que repitan la consulta para obtener el Iso2Code. Por tres razones
1. creo que es más prolijo que en una aplicación, el id de una entidad que se expone sea coherente, o sea que no dependa de a qué servicio se llame. Los id de países que ponemos como parte de los URL, claramente se están exponiendo. 
2. que el servicio que obtiene el iso2Code a partir del iso3Code sea el mismo que se consulta para obtener los datos del país, es incidental.
3. nos va a servir para establecer una cache en el CovidDataService.

Para ser mínimamente prolijos, pongamos la consulta COVID en un método aparte, que va a estar en un provider. Y de ahí plantear los tres casos: 
- otro método en el mismo provider
- otro provider en el mismo módulo
- otro módulo

Ahora, dada la decisión de que el covid service se encarga de traducir de iso3Code a iso2Code, las consultas a los providers son independientes. No dejen de usar Promise.all.

Lo implementamos.
- el find en en CovidDataService.getRecords, uf, puede ser undefined
  cómo hago que pase strict: casteo 
- la magia de cómo tipa el resultado de Promise.all en CovidDataService.getRecords
  - hay que ayudarlo en CountryDataController.getLongSummary, por qué

Para la integración ¿qué pasa si la hacemos en el controller? Prueben. 

Acá se puede probar agregar un atributo a la interface y ver cómo marca dónde falta

Yo diría, estén un rato probando distintas opciones.
Si definen dos módulos, tal vez lo que dice al final del forward ref les puede servir.

En algún momento, plantear/repasar qué pasa si el COVID service no da respuesta. Esta es otra faceta común que aparece cuando integramos datos: 
La primera pregunta es ¿qué hacemos, tiramos un 500? En este caso decidamos que no, que simplemente no incluimos el atributo con la info COVID en la respuesta.

Mirar lo que dice de incluir undefined como posible respuesta en el tipo.
Si no están usando strict, mostarlo yo que sí me puse strict.

A esta altura, si tenemos varios endpoints en un controller, cambiar la ruta en @Controller y ver cómo cambian todos los endpoints
    
Después, pensar qué onda si el endpoint de Covid tira error. Forzar un error (el que está de Nicaragua)
Plantear opciones, modelarlo.
Buen momento para pensar dónde generar las HttpException, si en los servicios o en los controller.
(volver a la página de manejo de errores, que tiene una sección sobre esto)


Listo, tenemos dos módulos, varios endpoints, ya vamos entendiendo cómo funciona "esto de Nest".
Un buen siguiente paso sería volver a pensar **por qué** Nest, por qué no usar Express derecho viejo.
OJO que no es mala pregunta, pero vamos a defender Nest.

Una es que me ayuda a "subir" a TypeScript, con los chequeos (sobre todo, de que no me olvido de mandar datos en una response)

Otra es que un poco me olvido de request y response.
Acá hacer el dibujito del kernel de negocio, y lo que rodea para transformar un negocio en una app Web.
Hay una parte que ya vimos que hace: definición de endpoints, generación de responses en caso feliz, manejo de errores.

Pero hay más cosas en la diferencia app-negocio, los viejos "cross cutting concerns"
- logueo
- autenticación
- validación
Esto se suele manejar con aspectos / middleware
(ir a "middleware - en general y en Nest")

De acá, saltar a los tipos específicos de middleware de Nest.
Uno ya lo vimos, errores.
Vamos a usar otros tres. Los introducimos. Y después, básicamente vamos a la página de cada uno, mostramos los ejemplos, y que hagan los desafíos.






Cosas para después
- ir pensando en cache ¿no? al menos para los countryCodes
  - ¿cómo hacer para no buscar siempre para traducir de iso3code a iso2code?


