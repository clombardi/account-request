Seguimos la guía de NestJS ¡de la versión 6! - https://docs.nestjs.com/v6/ -> Techniques -> Mongo
(el link directo no anda, redirecciona al home de la versión actual)


-------------------------------------------------------------------------------------------
(página "TS + Mongoose + Nest")
Cerramos la etapa 0 con un ejemplo que integra los temas principales que vimos.
El discurso puede ser que hay algo nuevo: el soporte para Mongoose que da Nest. 
Pero aprovechamos para varias cosas
- hacer un ejemplo integrador
- ver cómo se puede trabajar "tipado" con Mongo/Mongoose.
- lo que dice de la diferencia de tipado entre API, servicio y base.

Aca OJO que en la versión 7 de Nest se agrega una forma más cheta, que no vamos a ver porque BdSol se queda en la versión 6 de Nest por el momento.
Insistir en que vamos a ir por tipar todo sólo para que se vea cómo queda, no es que necesariamente convenga siempre tipar todo.

Bueno, que armen el módulo así practican. Por lo menos tienen que definir un tipo, no vale que diga any en ningún lado. Digamos AccountRequest.
Pueden aprovechar para practicar algo de middleware
- un guard para chequear usuario
- un interceptor para agregar el promedio de requiredApprovals.
- un interceptor para que muestre qué endpoint está sirviendo (yo lo tengo como LogEndpointInterceptor).



-------------------------------------------------------------------------------------------
(página "Conectando Mongoose con Nest")
Arrancamos cargando los packages necesarios
Verificar que se entiende por qué hay que incorporar @types/mongoose, y qué es eso de --save-dev.


Paso 1: conexión
--------------------------
En el app.module. Nótese que estamos incorporando un MongooseModule, interesante destacarlo porque es en ese módulo donde van a quedar definidos los esquemas.

Una cosa linda de ver es que 
- de crear el objeto conexión se encarga Nest
- la app Nest no levanta si no está Mongo levantado, te avisa con un mensaje claro, y no se cae enseguida, espera que levantes la base y sigue.
Esto es otro servicio que nos da Nest, para seguir entendiendo la utilidad de Nest.



Pasos 2 y 3: esquema + model
--------------------------
Definimos el esquema. 
Como dijimos, queda en el MongooseModule. Vamos a importar esta definición en el módulo de AccountRequest, como dice el instructivo.
    imports: [MongooseModule.forFeature([
        { name: 'AccountRequest', schema: AccountRequestSchema }
    ])],
acá entiendo que el "name" ya es el nombre del model.

Ahora insertemos el model en el servicio, como indica el instructivo. 
    constructor(@InjectModel('AccountRequest') private accountRequestModel: Model<any>) {}
Dice algo de qué pasa si quiero el mismo modelo en varios módulos NestJS ... lo vemos más adelante.

Qué feo que diga "any" en el modelo. Ya veremos cómo resolverlo.



Paso 4: operaciones
--------------------------
Listo, tengo el modelo, le hago el find. 
Por ahora no tipo lo que viene de Mongoose ... pero me tengo que acordar del await cuando hago el find.
Podría usar toObject(), prefiero manejarlo a mano para saber bien qué pongo.

Ver los desafíos en esa página.





-------------------------------------------------------------------------------------------
(página "Tipos: en la API, en el servicio, en la base")

El objetivo inicial de todo esto es tipar el modelo de Mongoose. Qué feo que diga "any" en el modelo. 

Pero antes, pensemos en los tres entornos que maneja un servicio que accede a BD, por sencillo que sea.

A ver la fecha.
- en el servicio: moment
- en el controller: string YYYY-MM-DD
- en la base: number

El status: podría quedar String, igual la validación la va a hacer el esquema, esto es un poco un chiche. Nos sirve para aprender más sobre enums.
Una vez tomada esta decisión, entender el problema: en la base hay un String, en JS es un String. Peeeero en TS el status es un enum, entonces no le puedo asignar un string, me da error de tipos. Eso mostrarlo, mostrar bien el error que tira.
Después de darle mil (pero mil) vueltas, descubrí que el casteo derecho viejo sirve.
Síiii estoy casteando, pero qué mal. ¿Hay alternativas sin casteo? No encontré (y miren que busqué) ninguna que funcione si pongo estricto al compilador. Mostrar la versión con el str.toUpperCase(), anda, le habilito noImplicitAny o strict, auch, dejó de compilar.

Listo, volvamos al "any" en el modelo. Le quiero poner AccountRequestData ... pero no.
¿Por qué?
De lo de Mongoose, sabemos que un modelo maneja documentos. Para eso Mongoose define la interface Document.
Por lo tanto, nuestra interface tiene que extender de Document.


Ejercicio: factorizar las definiciones de interfaces usando herencia.



Paso 4: operaciones
--------------------------
Listo, tengo el modelo, le hago el find. 
Pero ... uh esta definición tan bonita
    getAccountApplicationsMongoose(): AccountApplicationMongoose[] {
        return this.accountApplicationModel.find({});
    }
no tipa ni a ganchos, el find me devuelve un DocumentQuery. ¿Qué falta? Esoooo el asincronismo.
    async getAccountApplicationsMongoose(): AccountApplicationMongoose[] {
        return await this.accountApplicationModel.find({});
    }
y todavía no, no me devuelve la lista, me devuelve una promesa de que eventualmente va a venir una lista.
Eso lo tengo que poner explícito en el tipo de respuesta
    async getAccountApplicationsMongoose(): Promise<AccountApplicationMongoose[]> {
        return await this.accountApplicationModel.find({});
    }
OK, TS podría darse cuenta que si una función es async es obvio que va a manejar promesas y evitarme tener que poner Promise ... pero no lo hace, y punto.
El tipo de retorno de toda operación asincrónica es Promise<tipo-que-me-interesa>, de acá hasta el request.
Podemos generar de prepo la promesa en la versión fija, e ir cambiando la firma de los métodos hasta el controller.

Listo, ya tengo el asincronismo manejado, nos falta un detalle.
Obviamente, me da documentos de Mongoose, que además de faltarle una adaptación de tipos, tienen mucho más de lo que quiero.
Entonces -> map y aprovecho para recortar y transformar.

Y ... casi!!! ... estamos, nos falta el status.

Ejercicio: transformar AccountRequestDto en clase y aplicar validaciones. Pasar **todas** las interfaces a clases.






¿Y cómo vamos con el tipado?
--------------------------
Bien, notemos que el resultado del find está bien tipado, y me ayuda en el editor.
Por otro lado, también estoy casteando correctamente el resultado del servicio.


Post: agregamos un AccountApplication
--------------------------
Primero hagamos un dibujito de los tipos

                    en el Controller                en el Service               en la persistencia 
                    AccountApplicationDto           AccountApplication          AccountApplicationMongoose
--------------------------------------------------------------------------------------------------------            
date                string YYYY-MM-DD               moment                      number
status              string                          Status                      string
customer            string                          string                      string
requiredApprovals   number                          number                      number

a partir de este dibujito, tengamos claro
- qué vamos a recibir en el body
- qué transformaciones hay que hacer en el controller para mandarle al Service lo que espera
- qué transformaciones hay que hacer en el Service para mandarle a la persistencia lo que espera

Con esto, podemos escribir los métodos en el controller y en el service.
Recordamos que el documento se obtiene haciendo new model(data).
Por ahora, no tipamos el objeto data.

Digamos que queremos devolver el id del objeto creado. A quién se lo vamos a pedir: a lo que nos devuelve el save. Así de feo, _id. No encontré nada mejor. Creeeo que al documento que creamos también se le puede pedir.

Listo, anda.

Mejora: tipar el data object que creamos. No le podemos poner AccountApplication, porque no tiene todo lo de document. Pero tenemos definido qué queremos. Solución: AccountApplicationMongooseData y definir AccountApplicationMongoose usando herencia múltiple de interfaces.

Problema: si se agrega un dato simple que va por todos lados, hay que tocar en tres lados.
Cómo podríamos resolverlo: AccountApplicationBasicData y que todos extiendan de ese.
